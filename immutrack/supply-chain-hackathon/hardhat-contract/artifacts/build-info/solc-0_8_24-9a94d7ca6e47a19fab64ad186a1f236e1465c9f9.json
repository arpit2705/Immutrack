{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-9a94d7ca6e47a19fab64ad186a1f236e1465c9f9",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contract/AuditLog.sol": "project/contract/AuditLog.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contract/AuditLog.sol": {
        "content": "// File: hardhat-contract/contracts/AuditLog.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract AuditLog is Ownable {\r\n    constructor(address initialOwner) Ownable(initialOwner) {}\r\n\r\n    struct Item {\r\n        string name;\r\n        string location; // initial location\r\n        string timestamp; // human-readable, provided by backend\r\n        address currentOwner;\r\n        bool exists;\r\n    }\r\n\r\n    struct TransferRecord {\r\n        address from;\r\n        address to;\r\n        string location;\r\n        string timestamp;\r\n    }\r\n\r\n    // Backward-compatible scan view for existing frontend\r\n    struct ScanEvent {\r\n        uint256 timestamp;\r\n        address handlerAddress;\r\n        string locationData;\r\n    }\r\n\r\n    mapping(uint256 => Item) public items;\r\n    mapping(uint256 => TransferRecord[]) public transferHistory;\r\n\r\n    // Mapping: ItemId => Array of Scan Events (legacy audit trail)\r\n    mapping(uint256 => ScanEvent[]) public itemHistory;\r\n\r\n    mapping(address => bool) public isAuthorizedHandler;\r\n\r\n    function setHandlerAuthorization(address _handler, bool _isAuthorized) public onlyOwner {\r\n        isAuthorizedHandler[_handler] = _isAuthorized;\r\n    }\r\n\r\n    // New: add item with details\r\n    function addItem(\r\n        uint256 _itemId,\r\n        string memory _name,\r\n        string memory _location,\r\n        string memory _timestamp,\r\n        address _owner\r\n    ) public onlyOwner {\r\n        require(!items[_itemId].exists, \"Item already exists\");\r\n        items[_itemId] = Item({\r\n            name: _name,\r\n            location: _location,\r\n            timestamp: _timestamp,\r\n            currentOwner: _owner,\r\n            exists: true\r\n        });\r\n    }\r\n\r\n    // New: transfer/scan record\r\n    function transferItem(\r\n        uint256 _itemId,\r\n        address _to,\r\n        string memory _location,\r\n        string memory _timestamp\r\n    ) public onlyOwner {\r\n        require(items[_itemId].exists, \"Item not found\");\r\n        require(isAuthorizedHandler[_to], \"Handler not authorized\");\r\n        address prev = items[_itemId].currentOwner;\r\n        items[_itemId].currentOwner = _to;\r\n        transferHistory[_itemId].push(TransferRecord({\r\n            from: prev,\r\n            to: _to,\r\n            location: _location,\r\n            timestamp: _timestamp\r\n        }));\r\n\r\n        // Also push legacy scan for existing UI readers\r\n        itemHistory[_itemId].push(ScanEvent({\r\n            timestamp: block.timestamp,\r\n            handlerAddress: _to,\r\n            locationData: _location\r\n        }));\r\n    }\r\n\r\n    function getItemHistory(uint256 _itemId) public view returns (TransferRecord[] memory) {\r\n        return transferHistory[_itemId];\r\n    }\r\n\r\n    // Backward-compatible\r\n    function registerItem(uint256 _itemId) public onlyOwner {\r\n        require(!items[_itemId].exists, \"Item already exists\");\r\n        items[_itemId] = Item({\r\n            name: \"\",\r\n            location: \"\",\r\n            timestamp: \"\",\r\n            currentOwner: owner(),\r\n            exists: true\r\n        });\r\n    }\r\n\r\n    function addScan(\r\n        uint256 _itemId,\r\n        address _handler,\r\n        string memory _locationData\r\n    ) public onlyOwner {\r\n        require(items[_itemId].exists, \"Item not found\");\r\n        require(isAuthorizedHandler[_handler], \"Handler not authorized\");\r\n        itemHistory[_itemId].push(ScanEvent({\r\n            timestamp: block.timestamp,\r\n            handlerAddress: _handler,\r\n            locationData: _locationData\r\n        }));\r\n    }\r\n\r\n    function getHistory(uint256 _itemId) public view returns (ScanEvent[] memory) {\r\n        return itemHistory[_itemId];\r\n    }\r\n}"
      }
    }
  }
}